
//单行注释  不会被编译出来
/*
  多行注释  会被编译出来
*/
.box{
  height: 100px;
}

//Sass定义变量通过 $+变量名 ：value
//Less通过@+变量名 ：value
$number : 123px;
.box2{
  width: $number;
}

//插值 sass通用#{}调用
//Less使用${}调用

$key : margin;
$i : 3;
box#{$i}{
  #{$key} : auto;
}
//作用域 同java js 相同
//作用域 当前作用范围找不到该值，会继续向上找
//Sass的作用域是有顺序的
//Less没有
$number : 50px;
.box4{
  height: $number;
  $number : 1px;
}
//设置全局作用域  关键字：!global;
$i : 5;
box#{$i}{
    $i : 20 !global;
    height: 18px;
}
$p : p;
#{$p}{
    height:100px;
}

//sass的嵌套规则类似于HTML的嵌套规则
ul{
  li:first-child{
    a{
      display: block;
    }
  }

  li{
    p{
      height: 68px;
    }
  }
}

//sass不仅可以进行以上的标签嵌套，也可以进行属性嵌套，类似于css的简写(属性无法嵌套)
//如：background: #fe0000 url("#") 50px 50px


/*
类似 CSS，Sass 支持 @import 指令。

@import 指令可以让我们导入其他文件等内容。

CSS @import 指令在每次调用时，都会创建一个额外的 HTTP 请求。但，Sass @import 指令将文件包含在 CSS 中，不需要额外的 HTTP 请求。

Sass @import 指令语法如下：

@import filename;
*/

@import "secondSass";

//引用未编译的sass文件，也就是说只有sass文件 而没有对应的css文件
@import "threeSass";

//1.封装一个mixin的混入
@mixin text_style{
    text-decoration: none;
    text-align: center;
}
//2.引入text_style样式函数
p{
  @include text_style;
  weight: 300px;
}

//3.以上就是无参样式函数的使用，也可以使用有参方法调用
@mixin font_style($l){
  text-align: center;
  line-height: $l;
}

p{
  @include font_style(26px);
}

//4.样式函数的参数也可以设为默认值，如：重构 3.的测试
@mixin font_style($l: 15px){
  text-align: center;
  line-height: $l;
}

p{
  @include font_style;
}

//5.有时候我们并不能确定需要多少个具体参数，如background: 后面的参数个数是可变的，
//所以我们可以使用类似于java中动态数组的方法，格式：...
@mixin background_style($style...){
  background:$style;
}

p{
    @include background_style(#fe0000);
}
p1{
    @include background_style(#ffffff  url("#"));
}

//@extend 继承 和类继承功能相同，共同的特性可以封装一个父类，然后不同的子类继承
a{
    text-align: center;
    text-decoration: none;
}

//现在我需要定义一个a1继承a,并且为a1定义宽高
a1{
    @extend a;
    height: 500px;
}
//定义a2继承a1,并且为 a2 覆盖高的值，
a2{
    @extend a1;
    height: 300px;
}

//函数的学习

//一 字符串函数
/*1.quote  给参数加上引号
  中间不允许为空格
*/
p{
  content: quote(hello);
}

/*
  2.unquote 去除参数的引号
*/
p{
  content: unquote("hello");
}

/*
  3.str-index返回字符串第一次出现的位置
  sass里面 字符串下标是从 1 开始的
*/
p{
  content: str-index("123456789","3");
}

/*
  4.str-insert在某个字符串的某个位置插入某个子串
*/
p{
  content: str-insert("12456789","3",3);
}

/*
  5.str-slice 截取字符串
  区间范围为闭合[start , end]
*/
p{
  content: str-slice("123456789",6,8);
  //如果为定义结束位置则默认截取到末尾
  content: str-slice("123456789",5);
}

/*
  to-upper-case   转换为大写
  to-lower-case   转换为小写
*/
p{
  content: to-upper_case("abc");
  content: to_lower_case("YIO");
}

/*
  unique-id 返回一个无引号的随机字符串作为id
  只能保证在单次的sass编译中确保id的唯一性
*/
p{
  content: unique_id();
}

//二 数学函数
/*
  1. abs  返回一个数的绝对值
*/
p{
  content: abs(-15);
}

/*
  2. ceil 向上取整
*/
p{
  content: ceil(3.3);
}

/*
  3. floor 向下取整
*/
p{
  content: floor(3.9);
}

/*
  4. comparable(num1 , num2) 返回一个布尔值
  判断两个参数是否可以进行比较
*/
p{
  content: comparable(15px , 15);
  content: comparable(15px , 25px);
  content: comparable(10mm , 25cm);
  content: comparable(15px , 10cm);
  content: comparable(15px , 2rem);
  content: comparable(15px , 2em);
}

/*
  5. max  返回参数中最大的数
     min  返回参数中最小的数
     注意：参数可以是任意个
*/
p{
  content: max(2,-3,5,6,7,1,8,6);
  content: min(45,6,3,748,-9,425,-6,48);
}

/*
  6. percentage 将数字转换为百分比形式
*/
p{
  content: percentage(0.7);
}

/*
  7. random(number) 返回 1 和 参数 之间任意的值
  范围：[1,number];
*/
p{
  content: random(18);
}

/*
  8. round(number) 返回最接近该数的一个整数，四舍五入
*/
p{
  content: round(15.3);
}

//三 列表函数

/*
  1. append(list , value) 将value 追加到列表的末尾
  列表下标是从 1 开始
*/
p{
  content: append(("hello" , 7) , "new");
}

/*
  2. index(list , value) 返回list列表中value的下标，没有就是null
*/
p{
  content: index((1 2 3 4 5) , 3);
}

/*
  3. is-bracketed(list) 判断list列表中是否含有中括号
*/
p{
  content: is_bracketed([]);
}

/*
  4. join(list1 , list2) 将list2 加入到list1
*/
p{
  content: join((5,6,7),9 10 11);
  content: join((5 6 7),9 10 11);
}

/*
  5. length(list) 返回list列表的长度
*/
p{
  content: length(15 20 30);
}

/*
  6. list-separator 返回分隔符类型
*/
p{
  content: list_separator(15 60 30);
}

/*
  7.nth(list , n) 获取第n项的值
*/
p{
  content: nth(a b c , 2);
}

/*
  8. set-nth(list , n , value) 替换第n项的值
*/
p{
  content: set_nth(5 10 15,2,15);
}

/*
 9. zip(list) 将多个离别按照以相同索引值为一组，重新组成一个新的多维度列表
 */
p{
  content: zip(1px 2px 3px , solid dashed dotted , #fe0000 #ffffff #000000);
  content: zip(#fe0000 #ffffff #000000 , url("#1") url("#2") url("#3") , no-repeat repeat no-repeat);
}